export default async function handler(req, res) {
  try {
    if (req.method !== 'POST') return res.status(405).end();
    const body = await read(req);
    const { messages = [], userId = 'anon' } = body;

    const system = {
      role: 'system',
      content: "You are SoulSync, a warm, supportive companion. Use CBT-style reframing when helpful."
    };

    const r = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [system, ...messages],
        temperature: 0.7
      })
    });

    if (!r.ok) return res.status(500).json({ error: await r.text() });
    const data = await r.json();
    res.status(200).json({ answer: data.choices?.[0]?.message?.content || '' });
  } catch (e) { res.status(500).json({ error: e.message }); }
}
function read(req){return new Promise((resolve,reject)=>{let b='';req.on('data',c=>b+=c);req.on('end',()=>{try{resolve(JSON.parse(b||'{}'))}catch(e){reject(e)}})})}
export const config = { api: { bodyParser: false } };
export default async function handler(req, res) {
  try {
    if (req.method !== 'POST') return res.status(405).end();
    const r = await fetch('https://api.openai.com/v1/audio/transcriptions', {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${process.env.OPENAI_API_KEY}` },
      body: req
    });
    if (!r.ok) return res.status(500).json({ error: await r.text() });
    res.status(200).json(await r.json());
  } catch (e) { res.status(500).json({ error: e.message }); }
}
export const config = { api: { bodyParser: true } };
const VOICE_ID = process.env.ELEVENLABS_VOICE_ID || 'Rachel';

export default async function handler(req, res) {
  try {
    if (req.method !== 'POST') return res.status(405).end();
    const { text } = req.body || {};
    if (!text) return res.status(400).json({ error: 'Missing text' });

    const r = await fetch(`https://api.elevenlabs.io/v1/text-to-speech/${VOICE_ID}`, {
      method: 'POST',
      headers: {
        'xi-api-key': process.env.ELEVENLABS_API_KEY,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ text, voice_settings: { stability: 0.5, similarity_boost: 0.8 } })
    });
    if (!r.ok) return res.status(500).json({ error: await r.text() });

    const buf = Buffer.from(await r.arrayBuffer());
    res.setHeader('Content-Type', 'audio/mpeg');
    res.send(buf);
  } catch (e) { res.status(500).json({ error: e.message }); }
}
